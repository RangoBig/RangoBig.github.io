<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[jsp的运行原理及执行过程]]></title>
    <url>%2F2019%2F04%2F01%2Fjsp%E7%9A%84%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86%E5%8F%8A%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[jsp的运行原理及执行过程1、运行原理​ 当第一次访问jsp页面时，会向一个servlet容器（tomcat等）发出请求，servlet容器先要把 jsp页面转化为servlet代码（.java），再编译成.class 文件 再进行调用。当再次访问jsp页面时 跳过翻译和编译的过程 直接调用 2、执行过程 1、 客户端发出请求 12345672、web容器将jsp转化为servlet代码（.java）3、web容器将转化为servlet代码编译（.class）4、web容器加载编译后的代码并执行5、将执行结果响应给客户端 JSP执行过程图解 JSP的多线程思考当多个用户请求一个JSP页面时，Tomcat服务器为每个客户启动一个线程，该线程负责执行常住内存的字节码文件来响应客户的请求。这些线程有Tomcat服务器来管理。 这些线程共享JSP页面的成员变量（实例变量），因此任何一个用户对JSP页面成员变量的操作，都会影响到其他用户，这可能导致线程的不安全。为了保证线程安全，我们不要使用(实例变量+类变量),就这么简单。也可以使用synchronized同步方法,但是这样效率不高。 方法中的局部变量是不会影响线程安全的,因为他们是在栈上分配空间,而且每个线程都有自己私有的栈空间，运行在不同线程中的java程序片中的局部变量互不干扰。]]></content>
      <tags>
        <tag>jsp&amp;java web</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F03%2F24%2FREADME%2F</url>
    <content type="text"></content>
  </entry>
</search>
